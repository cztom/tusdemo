/**
 * Minified by jsDelivr using Terser v5.15.1.
 * Original file: /npm/tus-js-client@3.0.1/lib/upload.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Base64}from"js-base64";import URL from"url-parse";import DetailedError from"./error.js";import{log}from"./logger.js";import uuid from"./uuid.js";const defaultOptions={endpoint:null,uploadUrl:null,metadata:{},fingerprint:null,uploadSize:null,onProgress:null,onChunkComplete:null,onSuccess:null,onError:null,_onUploadUrlAvailable:null,overridePatchMethod:!1,headers:{},addRequestId:!1,onBeforeRequest:null,onAfterResponse:null,onShouldRetry:null,chunkSize:1/0,retryDelays:[0,1e3,3e3,5e3],parallelUploads:1,parallelUploadBoundaries:null,storeFingerprintForResuming:!0,removeFingerprintOnSuccess:!1,uploadLengthDeferred:!1,uploadDataDuringCreation:!1,urlStorage:null,fileReader:null,httpStack:null};class BaseUpload{constructor(t,e){"resume"in e&&console.log("tus: The `resume` option has been removed in tus-js-client v2. Please use the URL storage API instead."),this.options=e,this.options.chunkSize=Number(this.options.chunkSize),this._urlStorage=this.options.urlStorage,this.file=t,this.url=null,this._req=null,this._fingerprint=null,this._urlStorageKey=null,this._offset=null,this._aborted=!1,this._size=null,this._source=null,this._retryAttempt=0,this._retryTimeout=null,this._offsetBeforeRetry=0,this._parallelUploads=null,this._parallelUploadUrls=null}static terminate(t,e={}){const s=openRequest("DELETE",t,e);return sendRequest(s,null,e).then((t=>{if(204!==t.getStatus())throw new DetailedError("tus: unexpected response while terminating upload",null,s,t)})).catch((o=>{if(o instanceof DetailedError||(o=new DetailedError("tus: failed to terminate upload",o,s,null)),!shouldRetry(o,0,e))throw o;const r=e.retryDelays[0],i=e.retryDelays.slice(1),l={...e,retryDelays:i};return new Promise((t=>setTimeout(t,r))).then((()=>BaseUpload.terminate(t,l)))}))}findPreviousUploads(){return this.options.fingerprint(this.file,this.options).then((t=>this._urlStorage.findUploadsByFingerprint(t)))}resumeFromPreviousUpload(t){this.url=t.uploadUrl||null,this._parallelUploadUrls=t.parallelUploadUrls||null,this._urlStorageKey=t.urlStorageKey}start(){const{file:t}=this;if(!t)return void this._emitError(new Error("tus: no file or stream to upload provided"));if(!this.options.endpoint&&!this.options.uploadUrl&&!this.url)return void this._emitError(new Error("tus: neither an endpoint or an upload URL is provided"));const{retryDelays:e}=this.options;if(null==e||"[object Array]"===Object.prototype.toString.call(e)){if(this.options.parallelUploads>1)for(const t of["uploadUrl","uploadSize","uploadLengthDeferred"])if(this.options[t])return void this._emitError(new Error(`tus: cannot use the ${t} option when parallelUploads is enabled`));if(this.options.parallelUploadBoundaries){if(this.options.parallelUploads<=1)return void this._emitError(new Error("tus: cannot use the `parallelUploadBoundaries` option when `parallelUploads` is disabled"));if(this.options.parallelUploads!==this.options.parallelUploadBoundaries.length)return void this._emitError(new Error("tus: the `parallelUploadBoundaries` must have the same length as the value of `parallelUploads`"))}this.options.fingerprint(t,this.options).then((e=>(log(null==e?"No fingerprint was calculated meaning that the upload cannot be stored in the URL storage.":`Calculated fingerprint: ${e}`),this._fingerprint=e,this._source?this._source:this.options.fileReader.openFile(t,this.options.chunkSize)))).then((t=>{if(this._source=t,this.options.uploadLengthDeferred)this._size=null;else if(null!=this.options.uploadSize){if(this._size=Number(this.options.uploadSize),Number.isNaN(this._size))return void this._emitError(new Error("tus: cannot convert `uploadSize` option into a number"))}else if(this._size=this._source.size,null==this._size)return void this._emitError(new Error("tus: cannot automatically derive upload's size from input. Specify it manually using the `uploadSize` option or use the `uploadLengthDeferred` option"));this.options.parallelUploads>1||null!=this._parallelUploadUrls?this._startParallelUpload():this._startSingleUpload()})).catch((t=>{this._emitError(t)}))}else this._emitError(new Error("tus: the `retryDelays` option must either be an array or null"))}_startParallelUpload(){const t=this._size;let e=0;this._parallelUploads=[];const s=null!=this._parallelUploadUrls?this._parallelUploadUrls.length:this.options.parallelUploads,o=this.options.parallelUploadBoundaries??splitSizeIntoParts(this._source.size,s);this._parallelUploadUrls&&o.forEach(((t,e)=>{t.uploadUrl=this._parallelUploadUrls[e]||null})),this._parallelUploadUrls=new Array(o.length);const r=o.map(((s,r)=>{let i=0;return this._source.slice(s.start,s.end).then((({value:l})=>new Promise(((n,a)=>{const u={...this.options,uploadUrl:s.uploadUrl||null,storeFingerprintForResuming:!1,removeFingerprintOnSuccess:!1,parallelUploads:1,parallelUploadBoundaries:null,metadata:{},headers:{...this.options.headers,"Upload-Concat":"partial"},onSuccess:n,onError:a,onProgress:s=>{e=e-i+s,i=s,this._emitProgress(e,t)},_onUploadUrlAvailable:()=>{this._parallelUploadUrls[r]=p.url,this._parallelUploadUrls.filter((t=>Boolean(t))).length===o.length&&this._saveUploadInUrlStorage()}},p=new BaseUpload(l,u);p.start(),this._parallelUploads.push(p)}))))}));let i;Promise.all(r).then((()=>{i=this._openRequest("POST",this.options.endpoint),i.setHeader("Upload-Concat",`final;${this._parallelUploadUrls.join(" ")}`);const t=encodeMetadata(this.options.metadata);return""!==t&&i.setHeader("Upload-Metadata",t),this._sendRequest(i,null)})).then((t=>{if(!inStatusCategory(t.getStatus(),200))return void this._emitHttpError(i,t,"tus: unexpected response while creating upload");const e=t.getHeader("Location");null!=e?(this.url=resolveUrl(this.options.endpoint,e),log(`Created upload at ${this.url}`),this._emitSuccess()):this._emitHttpError(i,t,"tus: invalid or missing Location header")})).catch((t=>{this._emitError(t)}))}_startSingleUpload(){return this._aborted=!1,null!=this.url?(log(`Resuming upload from previous URL: ${this.url}`),void this._resumeUpload()):null!=this.options.uploadUrl?(log(`Resuming upload from provided URL: ${this.options.uploadUrl}`),this.url=this.options.uploadUrl,void this._resumeUpload()):(log("Creating a new upload"),void this._createUpload())}abort(t){return null!=this._parallelUploads&&this._parallelUploads.forEach((e=>{e.abort(t)})),null!==this._req&&this._req.abort(),this._aborted=!0,null!=this._retryTimeout&&(clearTimeout(this._retryTimeout),this._retryTimeout=null),t&&null!=this.url?BaseUpload.terminate(this.url,this.options).then((()=>this._removeFromUrlStorage())):Promise.resolve()}_emitHttpError(t,e,s,o){this._emitError(new DetailedError(s,o,t,e))}_emitError(t){if(!this._aborted){if(null!=this.options.retryDelays){if(null!=this._offset&&this._offset>this._offsetBeforeRetry&&(this._retryAttempt=0),shouldRetry(t,this._retryAttempt,this.options)){const t=this.options.retryDelays[this._retryAttempt++];return this._offsetBeforeRetry=this._offset,void(this._retryTimeout=setTimeout((()=>{this.start()}),t))}}if("function"!=typeof this.options.onError)throw t;this.options.onError(t)}}_emitSuccess(){this.options.removeFingerprintOnSuccess&&this._removeFromUrlStorage(),"function"==typeof this.options.onSuccess&&this.options.onSuccess()}_emitProgress(t,e){"function"==typeof this.options.onProgress&&this.options.onProgress(t,e)}_emitChunkComplete(t,e,s){"function"==typeof this.options.onChunkComplete&&this.options.onChunkComplete(t,e,s)}_createUpload(){if(!this.options.endpoint)return void this._emitError(new Error("tus: unable to create upload because no endpoint is provided"));const t=this._openRequest("POST",this.options.endpoint);this.options.uploadLengthDeferred?t.setHeader("Upload-Defer-Length",1):t.setHeader("Upload-Length",this._size);const e=encodeMetadata(this.options.metadata);let s;""!==e&&t.setHeader("Upload-Metadata",e),this.options.uploadDataDuringCreation&&!this.options.uploadLengthDeferred?(this._offset=0,s=this._addChunkToRequest(t)):s=this._sendRequest(t,null),s.then((e=>{if(!inStatusCategory(e.getStatus(),200))return void this._emitHttpError(t,e,"tus: unexpected response while creating upload");const s=e.getHeader("Location");if(null!=s){if(this.url=resolveUrl(this.options.endpoint,s),log(`Created upload at ${this.url}`),"function"==typeof this.options._onUploadUrlAvailable&&this.options._onUploadUrlAvailable(),0===this._size)return this._emitSuccess(),void this._source.close();this._saveUploadInUrlStorage().then((()=>{this.options.uploadDataDuringCreation?this._handleUploadResponse(t,e):(this._offset=0,this._performUpload())}))}else this._emitHttpError(t,e,"tus: invalid or missing Location header")})).catch((e=>{this._emitHttpError(t,null,"tus: failed to create upload",e)}))}_resumeUpload(){const t=this._openRequest("HEAD",this.url);this._sendRequest(t,null).then((e=>{const s=e.getStatus();if(!inStatusCategory(s,200))return 423===s?void this._emitHttpError(t,e,"tus: upload is currently locked; retry later"):(inStatusCategory(s,400)&&this._removeFromUrlStorage(),this.options.endpoint?(this.url=null,void this._createUpload()):void this._emitHttpError(t,e,"tus: unable to resume upload (new upload cannot be created without an endpoint)"));const o=parseInt(e.getHeader("Upload-Offset"),10);if(Number.isNaN(o))return void this._emitHttpError(t,e,"tus: invalid or missing offset value");const r=parseInt(e.getHeader("Upload-Length"),10);!Number.isNaN(r)||this.options.uploadLengthDeferred?("function"==typeof this.options._onUploadUrlAvailable&&this.options._onUploadUrlAvailable(),this._saveUploadInUrlStorage().then((()=>{if(o===r)return this._emitProgress(r,r),void this._emitSuccess();this._offset=o,this._performUpload()}))):this._emitHttpError(t,e,"tus: invalid or missing length value")})).catch((e=>{this._emitHttpError(t,null,"tus: failed to resume upload",e)}))}_performUpload(){if(this._aborted)return;let t;this.options.overridePatchMethod?(t=this._openRequest("POST",this.url),t.setHeader("X-HTTP-Method-Override","PATCH")):t=this._openRequest("PATCH",this.url),t.setHeader("Upload-Offset",this._offset);this._addChunkToRequest(t).then((e=>{inStatusCategory(e.getStatus(),200)?this._handleUploadResponse(t,e):this._emitHttpError(t,e,"tus: unexpected response while uploading chunk")})).catch((e=>{this._aborted||this._emitHttpError(t,null,`tus: failed to upload chunk at offset ${this._offset}`,e)}))}_addChunkToRequest(t){const e=this._offset;let s=this._offset+this.options.chunkSize;return t.setProgressHandler((t=>{this._emitProgress(e+t,this._size)})),t.setHeader("Content-Type","application/offset+octet-stream"),(s===1/0||s>this._size)&&!this.options.uploadLengthDeferred&&(s=this._size),this._source.slice(e,s).then((({value:e,done:s})=>(this.options.uploadLengthDeferred&&s&&(this._size=this._offset+(e&&e.size?e.size:0),t.setHeader("Upload-Length",this._size)),null===e?this._sendRequest(t):(this._emitProgress(this._offset,this._size),this._sendRequest(t,e)))))}_handleUploadResponse(t,e){const s=parseInt(e.getHeader("Upload-Offset"),10);if(Number.isNaN(s))this._emitHttpError(t,e,"tus: invalid or missing offset value");else{if(this._emitProgress(s,this._size),this._emitChunkComplete(s-this._offset,s,this._size),this._offset=s,s===this._size)return this._emitSuccess(),void this._source.close();this._performUpload()}}_openRequest(t,e){const s=openRequest(t,e,this.options);return this._req=s,s}_removeFromUrlStorage(){this._urlStorageKey&&(this._urlStorage.removeUpload(this._urlStorageKey).catch((t=>{this._emitError(t)})),this._urlStorageKey=null)}_saveUploadInUrlStorage(){if(!this.options.storeFingerprintForResuming||!this._fingerprint||null!==this._urlStorageKey)return Promise.resolve();const t={size:this._size,metadata:this.options.metadata,creationTime:(new Date).toString()};return this._parallelUploads?t.parallelUploadUrls=this._parallelUploadUrls:t.uploadUrl=this.url,this._urlStorage.addUpload(this._fingerprint,t).then((t=>{this._urlStorageKey=t}))}_sendRequest(t,e=null){return sendRequest(t,e,this.options)}}function encodeMetadata(t){return Object.entries(t).map((([t,e])=>`${t} ${Base64.encode(String(e))}`)).join(",")}function inStatusCategory(t,e){return t>=e&&t<e+100}function openRequest(t,e,s){const o=s.httpStack.createRequest(t,e);o.setHeader("Tus-Resumable","1.0.0");const r=s.headers||{};if(Object.entries(r).forEach((([t,e])=>{o.setHeader(t,e)})),s.addRequestId){const t=uuid();o.setHeader("X-Request-ID",t)}return o}function sendRequest(t,e,s){return("function"==typeof s.onBeforeRequest?Promise.resolve(s.onBeforeRequest(t)):Promise.resolve()).then((()=>t.send(e).then((e=>("function"==typeof s.onAfterResponse?Promise.resolve(s.onAfterResponse(t,e)):Promise.resolve()).then((()=>e))))))}function isOnline(){let t=!0;return"undefined"!=typeof window&&"navigator"in window&&!1===window.navigator.onLine&&(t=!1),t}function shouldRetry(t,e,s){if(null==s.retryDelays||e>=s.retryDelays.length||null==t.originalRequest)return!1;if(s&&"function"==typeof s.onShouldRetry)return s.onShouldRetry(t,e,s);const o=t.originalResponse?t.originalResponse.getStatus():0;return(!inStatusCategory(o,400)||409===o||423===o)&&isOnline()}function resolveUrl(t,e){return new URL(e,t).toString()}function splitSizeIntoParts(t,e){const s=Math.floor(t/e),o=[];for(let t=0;t<e;t++)o.push({start:s*t,end:s*(t+1)});return o[e-1].end=t,o}BaseUpload.defaultOptions=defaultOptions;export default BaseUpload;
//# sourceMappingURL=/sm/980e27778de5b49964fa608189d39bd1f3e176ab7378fa65acc96eaf830b7b82.map